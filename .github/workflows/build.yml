name: "Build Kernels"

env:
  CONFIGURATION: "repos.json"
  OUT_DIR: "out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "üì¶ Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
      - name: "‚úÖ Checkout"
        uses: actions/checkout@v3

      - name: "üì¶ Generate Matrix from JSON"
        id: generate-matrix
        uses: jaywcjlove/github-action-json@main
        with:
          file: ${{ env.CONFIGURATION }}
          field: $.*  # extracts all objects

  Build:
    name: "üß± Build kernel"
    runs-on: ubuntu-latest
    needs: Set-repos
    strategy:
      matrix:
        include: ${{fromJson(needs.Set-repos.outputs.repos)}}

    steps:
      - name: "‚úÖ Checkout kernel source"
        uses: actions/checkout@v3
        with:
          repository: ${{ matrix.kernelSource.repo }}
          ref: ${{ matrix.kernelSource.branch }}
          path: ${{ matrix.kernelSource.name }}

      - name: "üìÅ Set up environment"
        id: setup-env
        run: |
          echo "kernelName=${{ matrix.kernelSource.name }}" >> $GITHUB_ENV
          echo "kernelDir=${{ github.workspace }}/${{ matrix.kernelSource.name }}" >> $GITHUB_ENV
          echo "DEFCONFIG_NAME=${{ matrix.defconfig }}" >> $GITHUB_ENV

      - name: "üîß Install dependencies"
        run: |
          sudo apt update
          sudo apt install -y git make bc bison flex libssl-dev \
            libncurses-dev cpio curl zip unzip rsync lzop \
            build-essential libelf-dev device-tree-compiler lz4

      - name: "üêç Install Python 2 manually"
        run: |
          wget https://www.python.org/ftp/python/2.7.18/Python-2.7.18.tgz
          tar -xf Python-2.7.18.tgz
          cd Python-2.7.18
          ./configure --prefix=/usr/local
          make -j$(nproc)
          sudo make install
          sudo ln -sf /usr/local/bin/python2.7 /usr/bin/python2
          sudo ln -sf /usr/local/bin/python2.7 /usr/bin/python

      - name: "üß∞ Clone AnyKernel3"
        run: |
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3.git anykernel

      - name: "üß∞ Clone Toolchain"
        run: |
          mkdir -p clang
          git clone --depth=1 ${{ matrix.toolchains[0].repo }} -b ${{ matrix.toolchains[0].branch }} clang/proton-clang

      - name: "‚öôÔ∏è Generate and patch defconfig"
        working-directory: ${{ env.kernelDir }}
        run: |
          export PATH="$GITHUB_WORKSPACE/clang/proton-clang/bin:$PATH"
          make O=../${{ env.OUT_DIR }} ARCH=arm64 ${{ env.DEFCONFIG_NAME }}
          sed -i '/CONFIG_COMPAT_VDSO/d' ../${{ env.OUT_DIR }}/.config
          echo "CONFIG_COMPAT_VDSO=n" >> ../${{ env.OUT_DIR }}/.config
          make O=../${{ env.OUT_DIR }} ARCH=arm64 savedefconfig
          cp ../${{ env.OUT_DIR }}/defconfig arch/arm64/configs/${{ env.DEFCONFIG_NAME }}

      - name: "üèóÔ∏è Build kernel"
        working-directory: ${{ env.kernelDir }}
        run: |
          export PATH="$GITHUB_WORKSPACE/clang/proton-clang/bin:$PATH"
          make O=../${{ env.OUT_DIR }} \
            ARCH=${{ matrix.params.ARCH }} \
            CC=${{ matrix.params.CC }} \
            CROSS_COMPILE=${{ matrix.params.CROSS_COMPILE }} \
            CROSS_COMPILE_COMPAT=${{ matrix.params.CROSS_COMPILE_COMPAT }} \
            CLANG_TRIPLE=${{ matrix.params.CLANG_TRIPLE }} \
            AR=${{ matrix.params.AR }} \
            -j$(nproc)

      - name: "üì¶ Pack with AnyKernel3"
        run: |
          cp ${{ env.OUT_DIR }}/arch/arm64/boot/Image.gz-dtb anykernel/
          cd anykernel
          zip -r9 NetHunter-${{ matrix.kernelSource.device }}.zip * > /dev/null
          mkdir -p $GITHUB_WORKSPACE/output
          mv NetHunter-${{ matrix.kernelSource.device }}.zip $GITHUB_WORKSPACE/output/

      - name: "‚¨ÜÔ∏è Upload Flashable ZIP"
        uses: actions/upload-artifact@v4
        with:
          name: "NetHunter-${{ matrix.kernelSource.device }}"
          path: output/*.zip
