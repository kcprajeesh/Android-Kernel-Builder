name: "Build kernels"

env:
  CONFIGURATION: "repos.json"
  OUT_DIR: "out"

on:
  workflow_dispatch:

jobs:
  Set-repos:
    name: "🐂 Parse repos.json"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
      - name: "✅ Checkout"
        uses: actions/checkout@v3

      - name: "📦 Generate Matrix"
        id: generate-matrix
        run: |
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          cat ${{ env.CONFIGURATION }} >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "🐎 Build kernel"
    runs-on: ubuntu-latest
    needs: Set-repos
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      kernelDir: ${{ matrix.repos.kernelSource.name }}_${{ matrix.repos.kernelSource.device }}
      kernelName: ${{ matrix.repos.kernelSource.name }}
      kernelRepo: ${{ matrix.repos.kernelSource.repo }}
      kernelBranch: ${{ matrix.repos.kernelSource.branch }}
      kernelDevice: ${{ matrix.repos.kernelSource.device }}
      DEFCONFIG_NAME: ${{ matrix.repos.defconfig }}
    steps:
      - name: "📁 Create working dir"
        run: mkdir -p $kernelDir

      - name: "🔧 Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl git zip ftp \
            gcc-aarch64-linux-gnu \
            gcc-arm-linux-gnueabi binutils-arm-linux-gnueabi \
            gcc-arm-linux-gnueabihf binutils-arm-linux-gnueabihf \
            libssl-dev lftp zstd wget libfl-dev python3 python-is-python3 \
            libarchive-tools jq ccache flex bison clang lzop liblz4-tool

      - name: "🌱 Clone kernel source"
        working-directory: ./${{ env.kernelDir }}
        run: git clone --recursive --branch $kernelBranch $kernelRepo $kernelName --depth=1

      - name: "🧩 Patch defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          sed -i '/CONFIG_COMPAT_VDSO/d' arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_COMPAT_VDSO=n" >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_KERNEL_BUILD_IMAGE_GZ=y" >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_BUILD_ARM64_DT_OVERLAY=y" >> arch/arm64/configs/${{ env.DEFCONFIG_NAME }}

      - name: "🛠️ Get toolchains"
        working-directory: ./${{ env.kernelDir }}
        env:
          toolchains: "${{ toJSON(matrix.repos.toolchains) }}"
        run: |
          toolchains_num="$(echo $toolchains | jq 'length')"
          for ((i=0; i<toolchains_num; i++)); do
            name=$(echo $toolchains | jq -r ".[$i].name")
            repo=$(echo $toolchains | jq -r ".[$i].repo")
            branch=$(echo $toolchains | jq -r ".[$i].branch")
            git clone --recursive --branch $branch $repo $name --depth=1
            echo "$(pwd)/$name/" >> $GITHUB_PATH
            echo "$(pwd)/$name/bin" >> $GITHUB_PATH
          done

      - name: "🧠 Set build args"
        id: generate-args
        working-directory: ./${{ env.kernelDir }}
        env:
          params: "${{ toJSON(matrix.repos.params) }}"
        run: |
          ARCH=$(echo $params | jq -r ".ARCH")
          CROSS_COMPILE=$(echo $params | jq -r ".CROSS_COMPILE")
          CROSS_COMPILE_COMPAT=$(echo $params | jq -r ".CROSS_COMPILE_COMPAT")
          CROSS_COMPILE_ARM32=$(echo $params | jq -r ".CROSS_COMPILE_ARM32")
          CLANG_TRIPLE=$(echo $params | jq -r ".CLANG_TRIPLE")
          AR=$(echo $params | jq -r ".AR")
          CC=$(echo $params | jq -r ".CC")

          echo "CROSS32CC=arm-linux-gnueabi-gcc" >> $GITHUB_ENV
          echo "ARCH=$ARCH" >> $GITHUB_ENV

          args="-j$(nproc)"
          [ -n "${{ env.OUT_DIR }}" ] && mkdir -p $(pwd)/${{ env.OUT_DIR }} && args="$args O=$(pwd)/${{ env.OUT_DIR }}"
          [ -n "$ARCH" ] && args="$args ARCH=$ARCH"
          [ -n "$CROSS_COMPILE" ] && args="$args CROSS_COMPILE=$CROSS_COMPILE"
          [ -n "$CLANG_TRIPLE" ] && args="$args CLANG_TRIPLE=$CLANG_TRIPLE"
          [ -n "$CROSS_COMPILE_COMPAT" ] && args="$args CROSS_COMPILE_ARM32=$CROSS_COMPILE_COMPAT"
          [ -n "$AR" ] && args="$args AR=$AR"
          [ -n "$CC" ] && args="$args CC=$CC"
          args="$args CROSS32CC=arm-linux-gnueabi-gcc"

          echo "args=$args" >> $GITHUB_OUTPUT

      - name: "⚙️ Make defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: make ${{ steps.generate-args.outputs.args }} ${{ env.DEFCONFIG_NAME }}

      - name: "🔨 Build kernel"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: make ${{ steps.generate-args.outputs.args }}

      - name: "📂 Check output files"
        run: |
          echo "Boot folder:"
          ls -lh ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/

      - name: "❌ Fail if Image.gz-dtb missing"
        run: |
          FILE="./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz-dtb"
          if [ ! -f "$FILE" ]; then
            echo "❌ Image.gz-dtb not found!"
            exit 1
          fi

      - name: "📦 Package with AnyKernel3"
        working-directory: ./${{ env.kernelDir }}
        run: |
          git clone --depth=1 https://github.com/osm0sis/AnyKernel3
          cp ./${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz-dtb AnyKernel3/zImage
          cd AnyKernel3
          zip -r9 ../${{ env.kernelName }}-${{ env.kernelBranch }}-${{ env.kernelDevice }}.zip * -x .git README.md

      - name: "📤 Upload Image.gz-dtb"
        uses: actions/upload-artifact@v4
        with:
          name: Image.gz-dtb-${{ env.kernelDevice }}
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image.gz-dtb
          if-no-files-found: ignore
          retention-days: 7

      - name: "📤 Upload Flashable Zip"
        uses: actions/upload-artifact@v4
        with:
          name: Flashable-Zip-${{ env.kernelDevice }}
          path: ./${{ env.kernelDir }}/${{ env.kernelName }}-${{ env.kernelBranch }}-${{ env.kernelDevice }}.zip
          if-no-files-found: ignore
          retention-days: 7
